diff -ru a/src/main/cpp/stringhelper.cpp b/src/main/cpp/stringhelper.cpp
--- a/src/main/cpp/stringhelper.cpp	2008-03-31 15:34:09.000000000 -0700
+++ b/src/main/cpp/stringhelper.cpp	2019-10-16 01:33:05.997549600 -0700
@@ -21,6 +21,7 @@
 #include <log4cxx/helpers/transcoder.h>
 #include <algorithm>
 #include <vector>
+#include <iterator>
 #include <apr_strings.h>
 #include <log4cxx/helpers/pool.h>
 #if !defined(LOG4CXX)
diff -ru a/src/main/include/log4cxx/asyncappender.h b/src/main/include/log4cxx/asyncappender.h
--- a/src/main/include/log4cxx/asyncappender.h	2008-03-31 15:34:42.000000000 -0700
+++ b/src/main/include/log4cxx/asyncappender.h	2015-11-10 08:03:11.869541200 -0800
@@ -35,6 +35,7 @@
 
 namespace log4cxx
 {
+		LOG4CXX_LIST_DEF(LoggingEventList, log4cxx::spi::LoggingEventPtr);
 
         /**
         The AsyncAppender lets users log events asynchronously. It uses a
@@ -194,7 +195,6 @@
                 /**
                  * Event buffer.
                 */
-                LOG4CXX_LIST_DEF(LoggingEventList, log4cxx::spi::LoggingEventPtr);
                 LoggingEventList buffer;
 
                 /**
diff -ru a/src/main/include/log4cxx/helpers/bytearrayinputstream.h b/src/main/include/log4cxx/helpers/bytearrayinputstream.h
--- a/src/main/include/log4cxx/helpers/bytearrayinputstream.h	2008-03-31 15:34:26.000000000 -0700
+++ b/src/main/include/log4cxx/helpers/bytearrayinputstream.h	2015-11-10 08:03:58.905123600 -0800
@@ -33,13 +33,14 @@
 
         namespace helpers {
 
+		  LOG4CXX_LIST_DEF(ByteList, unsigned char);
+
           /**
            * InputStream implemented on top of a byte array.
            */
           class LOG4CXX_EXPORT ByteArrayInputStream : public InputStream
           {
           private:
-              LOG4CXX_LIST_DEF(ByteList, unsigned char);
               ByteList buf;
               size_t pos;
 
diff -ru a/src/main/include/log4cxx/helpers/bytearrayoutputstream.h b/src/main/include/log4cxx/helpers/bytearrayoutputstream.h
--- a/src/main/include/log4cxx/helpers/bytearrayoutputstream.h	2008-03-31 15:34:26.000000000 -0700
+++ b/src/main/include/log4cxx/helpers/bytearrayoutputstream.h	2015-11-10 08:04:43.213795300 -0800
@@ -33,6 +33,9 @@
 {
 
         namespace helpers {
+
+		  LOG4CXX_LIST_DEF(ByteList, unsigned char);
+
           class Pool;
 
           /**
@@ -41,7 +44,6 @@
           class LOG4CXX_EXPORT ByteArrayOutputStream : public OutputStream
           {
           private:
-                 LOG4CXX_LIST_DEF(ByteList, unsigned char);
                  ByteList array;
 
           public:
diff -ru a/src/main/include/log4cxx/helpers/objectimpl.h b/src/main/include/log4cxx/helpers/objectimpl.h
--- a/src/main/include/log4cxx/helpers/objectimpl.h	2008-03-31 15:34:26.000000000 -0700
+++ b/src/main/include/log4cxx/helpers/objectimpl.h	2015-11-12 22:36:14.581427600 -0800
@@ -33,11 +33,27 @@
          void addRef() const;
          void releaseRef() const;
 
+		 // added for VS2015
+		 ObjectImpl(ObjectImpl && o)
+		 {
+			 ref = o.ref;
+			 o.ref = 0;
+		 }
+
+		 ObjectImpl& operator=(ObjectImpl && o)
+		 {
+			 ref = o.ref;
+			 o.ref = 0;
+
+			 return *this;
+		 }
+		 // -----
+
       protected:
          mutable unsigned int volatile ref;
 
-        private:
-                        //
+      private:
+            //
             //   prevent object copy and assignment
             //
             ObjectImpl(const ObjectImpl&);
diff -ru a/src/main/include/log4cxx/helpers/simpledateformat.h b/src/main/include/log4cxx/helpers/simpledateformat.h
--- a/src/main/include/log4cxx/helpers/simpledateformat.h	2008-03-31 15:34:26.000000000 -0700
+++ b/src/main/include/log4cxx/helpers/simpledateformat.h	2015-11-10 08:05:36.335123400 -0800
@@ -39,6 +39,8 @@
             class PatternToken;
         }
 
+		  LOG4CXX_LIST_DEF(PatternTokenList, log4cxx::helpers::SimpleDateFormatImpl::PatternToken*);
+
           /**
            * Concrete class for formatting and parsing dates in a
            * locale-sensitive manner.
@@ -75,8 +77,6 @@
                   /**
                    * List of tokens.
                    */
-                  LOG4CXX_LIST_DEF(PatternTokenList, log4cxx::helpers::SimpleDateFormatImpl::PatternToken*);
-
                   PatternTokenList pattern;
                   
                   static void addToken(const logchar spec, const int repeat, const std::locale* locale, PatternTokenList& pattern);
diff -ru a/src/main/include/log4cxx/helpers/socketoutputstream.h b/src/main/include/log4cxx/helpers/socketoutputstream.h
--- a/src/main/include/log4cxx/helpers/socketoutputstream.h	2008-03-31 15:34:26.000000000 -0700
+++ b/src/main/include/log4cxx/helpers/socketoutputstream.h	2015-11-10 08:06:10.788254300 -0800
@@ -33,6 +33,8 @@
         namespace helpers
         {
 
+				LOG4CXX_LIST_DEF(ByteList, unsigned char);
+
                 class LOG4CXX_EXPORT SocketOutputStream : public OutputStream
                 {
                 public:
@@ -50,7 +52,6 @@
                         virtual void write(ByteBuffer& buf, Pool& p);
 
                 private:
-                        LOG4CXX_LIST_DEF(ByteList, unsigned char);
                         ByteList array;
                         SocketPtr socket;
                        //
diff -ru a/src/main/include/log4cxx/layout.h b/src/main/include/log4cxx/layout.h
--- a/src/main/include/log4cxx/layout.h	2008-03-31 15:34:42.000000000 -0700
+++ b/src/main/include/log4cxx/layout.h	2015-11-14 07:13:39.814132900 -0800
@@ -46,6 +46,20 @@
                         LOG4CXX_CAST_ENTRY(spi::OptionHandler)
                 END_LOG4CXX_CAST_MAP()
     
+				// added for VS2015
+				Layout() {}
+
+				Layout(Layout && o)
+					: helpers::ObjectImpl(std::move(o))
+				{ }
+
+				Layout& operator=(Layout && o)
+				{
+					helpers::ObjectImpl::operator=(std::move(o));
+					return *this;
+				}
+				// end of added for VS2015
+
                 virtual ~Layout();
                 void addRef() const;
                 void releaseRef() const;
Only in b/src/main/include/log4cxx: log4cxx.h
diff -ru a/src/main/include/log4cxx/net/sockethubappender.h b/src/main/include/log4cxx/net/sockethubappender.h
--- a/src/main/include/log4cxx/net/sockethubappender.h	2008-03-31 15:34:40.000000000 -0700
+++ b/src/main/include/log4cxx/net/sockethubappender.h	2015-11-10 08:06:47.338898300 -0800
@@ -38,6 +38,9 @@
         }
         namespace net
         {
+
+				LOG4CXX_LIST_DEF(ObjectOutputStreamList, log4cxx::helpers::ObjectOutputStreamPtr);
+
                 /**
                 Sends {@link log4cxx::spi::LoggingEvent LoggingEvent} objects to a set of remote log
                 servers, usually a SocketNode.
@@ -112,7 +115,6 @@
                         static int DEFAULT_PORT;
 
                         int port;
-                        LOG4CXX_LIST_DEF(ObjectOutputStreamList, log4cxx::helpers::ObjectOutputStreamPtr);
                         ObjectOutputStreamList streams;
                         bool locationInfo;
 
diff -ru a/src/main/include/log4cxx/net/telnetappender.h b/src/main/include/log4cxx/net/telnetappender.h
--- a/src/main/include/log4cxx/net/telnetappender.h	2008-03-31 15:34:40.000000000 -0700
+++ b/src/main/include/log4cxx/net/telnetappender.h	2015-11-10 08:08:12.152137000 -0800
@@ -39,6 +39,10 @@
         }
         namespace net
         {
+
+			typedef log4cxx::helpers::SocketPtr Connection;
+			LOG4CXX_LIST_DEF(ConnectionList, Connection);
+
 /**
 <p>The TelnetAppender is a log4cxx appender that specializes in
 writing to a read-only socket.  The output is provided in a
@@ -130,9 +134,6 @@
                         //   prevent copy and assignment statements
                         TelnetAppender(const TelnetAppender&);
                         TelnetAppender& operator=(const TelnetAppender&);
-
-                        typedef log4cxx::helpers::SocketPtr Connection;
-                        LOG4CXX_LIST_DEF(ConnectionList, Connection);
                         
                         void write(log4cxx::helpers::ByteBuffer&);
                         void writeStatus(const log4cxx::helpers::SocketPtr& socket, const LogString& msg, log4cxx::helpers::Pool& p);
diff -ru a/src/main/include/log4cxx/pattern/patternconverter.h b/src/main/include/log4cxx/pattern/patternconverter.h
--- a/src/main/include/log4cxx/pattern/patternconverter.h	2008-03-31 15:34:31.000000000 -0700
+++ b/src/main/include/log4cxx/pattern/patternconverter.h	2015-11-13 07:38:33.802413800 -0800
@@ -50,12 +50,12 @@
   /**
    * Converter name.
    */
-  const LogString name;
+  LogString name;
 
   /**
    * Converter style name.
    */
-  const LogString style;
+  LogString style;
 
 
 protected:
@@ -75,6 +75,22 @@
           LOG4CXX_CAST_ENTRY(PatternConverter)
   END_LOG4CXX_CAST_MAP()
 
+  // added for VS2015
+  PatternConverter(PatternConverter && o)
+	  : helpers::ObjectImpl(std::move(o))
+	  , name(o.name)
+	  , style(o.style)
+  { }
+
+  PatternConverter& operator=(PatternConverter && o)
+  {
+	  helpers::ObjectImpl::operator=(std::move(o));
+	  name = o.name;
+	  style = o.style;
+	  return *this;
+  }
+  // end of added for VS2015
+
   /**
    * Formats an object into a string buffer.
    * @param obj event to format, may not be null.
diff -ru a/src/main/include/log4cxx/patternlayout.h b/src/main/include/log4cxx/patternlayout.h
--- a/src/main/include/log4cxx/patternlayout.h	2008-03-31 15:34:42.000000000 -0700
+++ b/src/main/include/log4cxx/patternlayout.h	2015-11-10 08:09:03.736708000 -0800
@@ -33,6 +33,9 @@
 namespace log4cxx
 {
 
+		LOG4CXX_LIST_DEF(LoggingEventPatternConverterList, log4cxx::pattern::LoggingEventPatternConverterPtr);
+		LOG4CXX_LIST_DEF(FormattingInfoList, log4cxx::pattern::FormattingInfoPtr);
+
         /**
 
         A flexible layout configurable with pattern string.
@@ -334,13 +337,11 @@
                 /**
                  * Pattern converters.
                  */
-                LOG4CXX_LIST_DEF(LoggingEventPatternConverterList, log4cxx::pattern::LoggingEventPatternConverterPtr);
-                LoggingEventPatternConverterList patternConverters;
+				LoggingEventPatternConverterList patternConverters;
 
                /**
                 * Field widths and alignment corresponding to pattern converters.
                 */
-                LOG4CXX_LIST_DEF(FormattingInfoList, log4cxx::pattern::FormattingInfoPtr);
                 FormattingInfoList patternFields;
 
 
Only in b/src/main/include/log4cxx/private: log4cxx_private.h
diff -ru a/src/main/include/log4cxx/rolling/rollingpolicybase.h b/src/main/include/log4cxx/rolling/rollingpolicybase.h
--- a/src/main/include/log4cxx/rolling/rollingpolicybase.h	2008-03-31 15:34:29.000000000 -0700
+++ b/src/main/include/log4cxx/rolling/rollingpolicybase.h	2015-11-12 22:52:33.929481300 -0800
@@ -35,6 +35,9 @@
 namespace log4cxx {
     namespace rolling {
 
+		LOG4CXX_LIST_DEF(PatternConverterList, log4cxx::pattern::PatternConverterPtr);
+		LOG4CXX_LIST_DEF(FormattingInfoList, log4cxx::pattern::FormattingInfoPtr);
+
         /**
          * Implements methods common to most, it not all, rolling
          * policies.
@@ -57,13 +60,11 @@
           /**
            * File name pattern converters.
            */
-          LOG4CXX_LIST_DEF(PatternConverterList, log4cxx::pattern::PatternConverterPtr);
-          PatternConverterList patternConverters;
+		  PatternConverterList patternConverters;
 
           /**
            * File name field specifiers.
            */
-          LOG4CXX_LIST_DEF(FormattingInfoList, log4cxx::pattern::FormattingInfoPtr);
           FormattingInfoList patternFields;
 
           /**
@@ -80,6 +81,18 @@
           virtual void activateOptions(log4cxx::helpers::Pool& p) = 0;
           virtual log4cxx::pattern::PatternMap getFormatSpecifiers() const = 0;
 
+		  // added for VS2015
+		  RollingPolicyBase(RollingPolicyBase && o)
+			  : helpers::ObjectImpl(std::move(o))
+		  { }
+
+		  RollingPolicyBase& operator=(RollingPolicyBase && o)
+		  {
+			  helpers::ObjectImpl::operator=(std::move(o));
+			  return *this;
+		  }
+		  // end of added for VS2015
+
           virtual void setOption(const LogString& option,
                const LogString& value);
 
diff -ru a/src/main/include/log4cxx/rolling/triggeringpolicy.h b/src/main/include/log4cxx/rolling/triggeringpolicy.h
--- a/src/main/include/log4cxx/rolling/triggeringpolicy.h	2008-03-31 15:34:29.000000000 -0700
+++ b/src/main/include/log4cxx/rolling/triggeringpolicy.h	2015-11-14 07:16:20.547851500 -0800
@@ -1,80 +1,94 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-#if !defined(_LOG4CXX_ROLLING_TRIGGER_POLICY_H)
-#define _LOG4CXX_ROLLING_TRIGGER_POLICY_H
-
-
-#include <log4cxx/spi/optionhandler.h>
-#include <log4cxx/helpers/objectimpl.h>
-#include <log4cxx/spi/loggingevent.h>
-#include <log4cxx/appender.h>
-
-namespace log4cxx {
-    class File;
-
-    namespace rolling {
-
-        /**
-         * A <code>TriggeringPolicy</code> controls the conditions under which rollover
-         * occurs. Such conditions include time of day, file size, an
-         * external event or a combination thereof.
-         *
-         * 
-         * 
-         * */
-
-        class LOG4CXX_EXPORT TriggeringPolicy :
-              public virtual spi::OptionHandler,
-              public virtual helpers::ObjectImpl {
-              DECLARE_ABSTRACT_LOG4CXX_OBJECT(TriggeringPolicy)
-              BEGIN_LOG4CXX_CAST_MAP()
-                      LOG4CXX_CAST_ENTRY(TriggeringPolicy)
-                      LOG4CXX_CAST_ENTRY(spi::OptionHandler)
-              END_LOG4CXX_CAST_MAP()
-        public:
-             virtual ~TriggeringPolicy();
-             void addRef() const;
-             void releaseRef() const;
-
-            /**
-             * Determines if a rollover may be appropriate at this time.  If
-             * true is returned, RolloverPolicy.rollover will be called but it
-             * can determine that a rollover is not warranted.
-             *
-             * @param appender A reference to the appender.
-             * @param event A reference to the currently event.
-             * @param filename The filename for the currently active log file.
-             * @param fileLength Length of the file in bytes.
-             * @return true if a rollover should occur.
-             */
-            virtual bool isTriggeringEvent(
-              Appender* appender,
-              const log4cxx::spi::LoggingEventPtr& event,
-              const LogString& filename,
-              size_t fileLength) = 0;
-
-        };
-
-        LOG4CXX_PTR_DEF(TriggeringPolicy);
-
-
-    }
-}
-
-#endif
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+#if !defined(_LOG4CXX_ROLLING_TRIGGER_POLICY_H)
+#define _LOG4CXX_ROLLING_TRIGGER_POLICY_H
+
+
+#include <log4cxx/spi/optionhandler.h>
+#include <log4cxx/helpers/objectimpl.h>
+#include <log4cxx/spi/loggingevent.h>
+#include <log4cxx/appender.h>
+
+namespace log4cxx {
+    class File;
+
+    namespace rolling {
+
+        /**
+         * A <code>TriggeringPolicy</code> controls the conditions under which rollover
+         * occurs. Such conditions include time of day, file size, an
+         * external event or a combination thereof.
+         *
+         * 
+         * 
+         * */
+
+        class LOG4CXX_EXPORT TriggeringPolicy :
+              public virtual spi::OptionHandler,
+              public virtual helpers::ObjectImpl {
+              DECLARE_ABSTRACT_LOG4CXX_OBJECT(TriggeringPolicy)
+              BEGIN_LOG4CXX_CAST_MAP()
+                      LOG4CXX_CAST_ENTRY(TriggeringPolicy)
+                      LOG4CXX_CAST_ENTRY(spi::OptionHandler)
+              END_LOG4CXX_CAST_MAP()
+        public:
+			  // added for VS2015
+			  TriggeringPolicy() {}
+
+			  TriggeringPolicy(TriggeringPolicy && o)
+				  : helpers::ObjectImpl(std::move(o))
+			  { }
+
+			  TriggeringPolicy& operator=(TriggeringPolicy && o)
+			  {
+				  helpers::ObjectImpl::operator=(std::move(o));
+				  return *this;
+			  }
+			  // end of added for VS2015
+
+             virtual ~TriggeringPolicy();
+             void addRef() const;
+             void releaseRef() const;
+
+            /**
+             * Determines if a rollover may be appropriate at this time.  If
+             * true is returned, RolloverPolicy.rollover will be called but it
+             * can determine that a rollover is not warranted.
+             *
+             * @param appender A reference to the appender.
+             * @param event A reference to the currently event.
+             * @param filename The filename for the currently active log file.
+             * @param fileLength Length of the file in bytes.
+             * @return true if a rollover should occur.
+             */
+            virtual bool isTriggeringEvent(
+              Appender* appender,
+              const log4cxx::spi::LoggingEventPtr& event,
+              const LogString& filename,
+              size_t fileLength) = 0;
+
+        };
+
+        LOG4CXX_PTR_DEF(TriggeringPolicy);
+
+
+    }
+}
+
+#endif
diff -ru a/src/main/include/log4cxx/spi/filter.h b/src/main/include/log4cxx/spi/filter.h
--- a/src/main/include/log4cxx/spi/filter.h	2008-03-31 15:34:13.000000000 -0700
+++ b/src/main/include/log4cxx/spi/filter.h	2015-11-12 22:47:12.429302100 -0800
@@ -76,6 +76,20 @@
                 public:
                         Filter();
 
+						// added for VS2015
+						Filter(Filter && o)
+							: helpers::ObjectImpl(std::move(o))
+							, next(o.next)
+						{ }
+
+						Filter& operator=(Filter && o)
+						{
+							helpers::ObjectImpl::operator=(std::move(o));
+							next = o.next;
+							return *this;
+						}
+						// end of added for VS2015
+
                         void addRef() const;
                         void releaseRef() const;
 
diff -ru a/src/main/include/log4cxx/spi/loggingevent.h b/src/main/include/log4cxx/spi/loggingevent.h
--- a/src/main/include/log4cxx/spi/loggingevent.h	2008-03-31 15:34:13.000000000 -0700
+++ b/src/main/include/log4cxx/spi/loggingevent.h	2015-11-10 08:12:47.158586600 -0800
@@ -44,6 +44,8 @@
         namespace spi
         {
 
+				LOG4CXX_LIST_DEF(KeySet, LogString);
+
                 /**
                 The internal representation of logging events. When an affirmative
                 decision is made to log then a <code>LoggingEvent</code> instance
@@ -152,7 +154,6 @@
                         */
                         bool getMDC(const LogString& key, LogString& dest) const;
 
-                        LOG4CXX_LIST_DEF(KeySet, LogString);
                         /**
                         * Returns the set of of the key values in the MDC for the event.
                         * The returned set is unmodifiable by the caller.
@@ -168,6 +169,8 @@
                         */
                         void getMDCCopy() const;
 
+						typedef spi::KeySet KeySet;
+
                         /**
                         * Return a previously set property.
                         * @param key key.
